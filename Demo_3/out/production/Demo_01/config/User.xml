<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper    
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，对statement的信息进行分类管理 -->
<!-- 在mapper代理时，它具有特殊及重要的作用 -->
<mapper namespace="test">
	<!--根据用户id查询用户信息-->
	<!--select:表示一个MappedStatement对象-->
		    <!--id：statement的唯一标识-->
				<!--#{}:表示一个占位符?-->
				  <!--#{id}:里面的id表示输入参数的参数名称，如果该参数是简单类型，那么#{}里面的参数名称可以任意-->
			  <!--parameterType:输入参数的类型(单条结果所对应的java类型)-->
	<select id="findUserById" parameterType="int" resultType="po.User">
		select * from user where id = #{id}
	</select>


	<!--根据用户名称模糊查询用户列表-->
		<!--${}:表示一个sql的连接符-->
		<!--${value}：里面的value表示输入参数的参数名称，如果该参数是简单类型，那么${}里面的参数名称必须是value-->
		<!--${}这种写法存在sql注入的风险，所以要慎用！但在一些场景下，必须使用${}，比如排序时，动态传入排序的列名，${}会原样输出，不加解释-->
	<select id="findUserByName" parameterType="java.lang.String" resultType="po.User">
		SELECT * FROM USER WHERE username LIKE '%${value}%'
	</select>

	<!--添加用户-->
	<!--selectKey:查询主键，在标签内需要输入查询主键的sql-->
	<!--order：指定查询主键的sql和insert语句的执行顺序，相对insert语句来说-->
	<!--SELECT LAST_INSERT_ID:该函数是mysql的函数，获取自增主键的id，它必须配合insert语句一起使用-->
	<insert id="insertUser" parameterType="po.User">
		<selectKey keyProperty="id" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO user (username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
	</insert>

	<!--自增主键UUID-->
	<insert id="insertUser2" parameterType="po.User">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			SELECT UUID()
		</selectKey>
		INSERT INTO user (id,username,birthday,sex,address) VALUES(#{ID},#{username},#{birthday},#{sex},#{address})
	</insert>
</mapper>

